---
import { getCollection } from "astro:content";
import { Marked } from "marked";
// @ts-ignore
import { Image } from "astro:assets";
import { markedHighlight } from "marked-highlight";
import { codeToHtml } from "shikiji";
import MostRecentCommit from "../../components/MostRecentCommit.jsx";
import GitHub from "../../components/icons/GitHub.astro";
import Link from "../../components/icons/Link.astro";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const posts = await getCollection("projects");
  return posts.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const githubUrl = new URL(entry.data.repo);
const readmeUrl = `https://raw.githubusercontent.com${githubUrl.pathname}/main/README.md`;
const [owner, repo] = githubUrl.pathname.split("/").slice(1, 3);
const response = await fetch(readmeUrl);
const markdown = await response.text();
const marked = new Marked(
  markedHighlight({
    async: true,
    langPrefix: "language-",
    highlight(input: string, lang: string) {
      const code = codeToHtml(input, {
        lang,
        theme: "dark-plus",
      });
      return code;
    },
  }),
);
const content = marked.parse(markdown);
---

<Layout title={entry.data.name}>
  <header class="space-y-2 py-4">
    <Image
      class="rounded-lg"
      srcset={`${entry.data.header_image}, ${entry.data.header_image_2x} 2x`}
      src={entry.data.header_image}
      alt={entry.data.name}
      width={768}
      height={300}
    />
    <div
      class="flex flex-col justify-between gap-1 text-base text-squirrel-500 md:flex-row md:items-center md:gap-0 dark:text-squirrel-400"
    >
      <div
        class="flex flex-col gap-1 text-squirrel-800 md:flex-row md:items-center md:gap-4 dark:text-sea-100"
      >
        <span class="inline-flex items-center gap-1.5">
          <Link />
          <a
            href="https://crowdq.fm"
            class="hover:text-sea-700 hover:underline dark:hover:text-sea-200"
            >crowdq.fm</a
          >
        </span>
        <span class="inline-flex items-center gap-1.5">
          <GitHub />
          <a
            href="https://github.com/fostertheweb/crowdq.fm"
            class="hover:text-sea-700 hover:underline dark:hover:text-sea-200"
          >
            Repository
          </a>
        </span>
      </div>

      <MostRecentCommit client:load owner={owner} repo={repo} />
    </div>

    <article set:html={content} class="readme" />

    <Content />
  </header>

  <style is:global>
    .readme {
      @apply font-sans text-base text-squirrel-800 dark:text-squirrel-300;
    }

    .readme a {
      @apply text-sea-600 underline hover:text-sea-700 dark:text-sea-200 dark:hover:text-sea-300;
    }

    .readme ul {
      @apply mt-2 list-inside list-disc pl-1;
    }

    .readme ul:has(input[type="checkbox"]) {
      @apply list-none;
    }

    .readme ol {
      @apply mt-4 list-inside list-decimal pl-1;
    }

    .readme ul ul {
      @apply mt-0 pl-4;
    }

    .readme h2 {
      @apply mt-6 font-sans text-xl font-bold;
    }

    .readme h3 {
      @apply mt-4 font-sans text-lg font-bold dark:text-squirrel-200;
    }

    .readme p {
      @apply mt-4;
    }

    .readme pre.shiki {
      @apply mt-2 rounded border border-black/10 p-4 font-mono text-sm shadow-sm dark:border-white/5;
    }

    .readme p > code,
    .readme ol code,
    .readme ul code {
      @apply rounded border-0 border-sea-400 bg-squirrel-200/60 px-1 py-px font-mono text-sm text-sea-700 dark:border-white/10 dark:bg-black/20 dark:text-sea-300;
    }

    .readme pre code {
      @apply border-0 bg-transparent p-0 font-mono;
    }

    .readme input {
      @apply accent-sea-500;
    }
  </style>
</Layout>
