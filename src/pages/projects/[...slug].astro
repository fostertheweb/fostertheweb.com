---
import { getCollection } from "astro:content";
import { Marked } from "marked";
// @ts-ignore
import { markedHighlight } from "marked-highlight";
import { codeToHtml } from "shikiji";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const posts = await getCollection("projects");
  return posts.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const githubUrl = new URL(entry.data.repo);
const readmeUrl = `https://raw.githubusercontent.com${githubUrl.pathname}/main/README.md`;
const response = await fetch(readmeUrl);
const markdown = await response.text();
const marked = new Marked(
  markedHighlight({
    async: true,
    langPrefix: "language-",
    highlight(input: string, lang: string) {
      const code = codeToHtml(input, {
        lang,
        themes: {
          light: "github-light",
          dark: "github-dark",
        },
      });
      return code;
    },
  }),
);
const content = marked.parse(markdown);

// TODO: link to repo
// TODO: link to live project
// TODO: load last commit
---

<Layout title={entry.data.name}>
  <header class="space-y-2 py-4">
    <h1 class="font-serif text-4xl text-zinc-800">
      <img src={entry.data.logo} class="h-6 dark:invert" />
    </h1>
    <div class="text-sm">
      <a
        href="/"
        class="text-rainee-800 underline hover:text-zinc-800 dark:text-rainee-300 dark:hover:text-rainee-400"
        >Jonathan Foster</a
      ><span class="text-zinc-500 dark:text-zinc-400">
        - Last Commit: abcef1234</span
      >
    </div>
  </header>

  <article set:html={content} class="readme" />

  <Content />
</Layout>

<style is:global>
  .readme {
    /* font-family: Georgia, "Times New Roman", Times, serif; */
    @apply font-serif;
  }

  .readme a {
    @apply text-rainee-700 underline hover:text-rainee-900 dark:text-rainee-300 dark:hover:text-rainee-400;
  }

  .readme ul {
    @apply mt-2 list-inside list-disc pl-1;
  }

  .readme ul:has(input[type="checkbox"]) {
    @apply list-none;
  }

  .readme ol {
    @apply mt-4 list-inside list-decimal pl-1;
  }

  .readme ul ul {
    @apply mt-0 pl-4;
  }

  .readme h2 {
    @apply mt-6 font-sans text-xl font-bold;
  }

  .readme h3 {
    @apply mt-4 font-sans text-lg font-bold dark:text-zinc-200;
  }

  .readme p {
    @apply mt-2;
  }

  .readme pre.shiki {
    @apply mb-4 mt-2 rounded border border-black/10 p-4 font-mono text-sm dark:border-white/10;
  }

  .readme p > code,
  .readme ol code,
  .readme ul code {
    @apply rounded border-0 border-rainee-400 bg-zinc-200/60 px-1 py-px font-mono text-sm text-rainee-700 dark:border-white/10 dark:bg-black/20 dark:text-rainee-300;
  }

  .readme pre code {
    @apply border-0 bg-transparent p-0 font-mono;
  }

  .readme input {
    @apply accent-rainee-500;
    accent-color: #0ea5e9 !important;
    appearance: none;
  }

  .readme input::before {
    @apply mr-1 dark:invert;
    content: "ðŸ”œ";
  }

  .readme input:checked::before {
    content: "âœ…";
    filter: invert(0);
  }
</style>
